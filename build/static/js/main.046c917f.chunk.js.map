{"version":3,"sources":["hooks/useLocalStorage.js","contexts/cart.js","apis/api.js","components/checkout/checkout.js","components/card/card.js","components/card-list/card-list.js","components/cart/cart.js","components/homepage/homepage.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","initialValue","React","useState","item","window","localStorage","getItem","JSON","parse","error","console","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","initialState","isCartOpen","items","CartStateContext","createContext","CartDispatchContext","reducer","state","action","type","id","payload","cartItem","cartItems","map","includes","quantity","filter","cartItemId","Error","CartProvider","children","persistedCartItems","setPersistedCartItems","persistedCartState","useReducer","dispatch","useEffect","Provider","instance","axios","create","baseURL","resource","method","url","data","Checkout","isFetching","setIsFetching","responseStatus","setResponseStatus","useContext","className","length","name","price","onClick","newProducts","api","customerId","basket","basketId","products","then","response","log","clear","catch","Card","product","isAdded","setIsAdded","productItem","alt","src","productImage","addToCart","setTimeout","CardList","props","productList","Cart","to","Homepage","getProductDetails","setState","results","originalProductList","this","Component","App","path","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.046c917f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","/* eslint-disable no-case-declarations */\nimport React, { useReducer, createContext, useEffect } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nconst initialState = {\n  isCartOpen: false,\n  items: [],\n};\n\nexport const CartStateContext = createContext();\nexport const CartDispatchContext = createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"TOGGLE_CART_POPUP\":\n      return {\n        ...state,\n        isCartOpen: !state.isCartOpen,\n      };\n    case \"ADD_TO_CART\":\n      const id = action.payload.cartItem.id;\n      const isOld = state.items.map((item) => item.id).includes(id);\n      let cartItems = null;\n      if (isOld) {\n        const items = state.items.map((item) => {\n          if (item.id === id) {\n            return {\n              ...item,\n              quantity: item.quantity + 1,\n            };\n          }\n          return item;\n        });\n        cartItems = [...items];\n      } else {\n        cartItems = [...state.items, action.payload.cartItem];\n      }\n      return {\n        ...state,\n        items: cartItems,\n      };\n    case \"REMOVE_FROM_CART\":\n      return {\n        ...state,\n        items: state.items.filter(\n          (item) => item.id !== action.payload.cartItemId\n        ),\n      };\n    case \"CLEAR_CART\":\n      return {\n        ...state,\n        ...initialState,\n      };\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nexport const toggleCartPopup = (dispatch) => {\n  return dispatch({\n    type: \"TOGGLE_CART_POPUP\",\n  });\n};\n\nexport const addToCart = (dispatch, cartItem) => {\n  return dispatch({\n    type: \"ADD_TO_CART\",\n    payload: {\n      cartItem: cartItem,\n    },\n  });\n};\n\nexport const removeFromCart = (dispatch, cartItemId) => {\n  return dispatch({\n    type: \"REMOVE_FROM_CART\",\n    payload: {\n      cartItemId: cartItemId,\n    },\n  });\n};\n\nexport const clearCart = (dispatch) => {\n  return dispatch({\n    type: \"CLEAR_CART\",\n  });\n};\n\nconst CartProvider = ({ children }) => {\n  const [persistedCartItems, setPersistedCartItems] = useLocalStorage(\n    \"cartItems\",\n    []\n  );\n  const persistedCartState = {\n    isCartOpen: false,\n    items: persistedCartItems || [],\n  };\n  const [state, dispatch] = useReducer(reducer, persistedCartState);\n  useEffect(() => {\n    setPersistedCartItems(state.items);\n  }, [JSON.stringify(state.items)]);\n  return (\n    <CartDispatchContext.Provider value={dispatch}>\n      <CartStateContext.Provider value={state}>\n        {children}\n      </CartStateContext.Provider>\n    </CartDispatchContext.Provider>\n  );\n};\n\nexport default CartProvider;\n","import axios from \"axios\";\n\n// create instance of axios\nconst instance = axios.create({\n  baseURL: \"http://localhost:8001/v1\",\n});\n\nexport default {\n  getData: (resource) =>\n    instance({\n      method: \"GET\",\n      url: resource,\n    }),\n  postData: (resource, data) =>\n    instance({\n      method: \"POST\",\n      url: resource,\n      data: data,\n    }),\n};\n","import React, { useContext, useState } from \"react\";\nimport { CartStateContext } from \"../../contexts/cart\";\nimport \"./checkout.css\";\nimport api from \"../../apis/api\";\n\nexport const Checkout = () => {\n  const [isFetching, setIsFetching] = useState(false);\n  const [responseStatus, setResponseStatus] = useState(null); // can use resposneStatus here to show success or error\n  const { items } = useContext(CartStateContext);\n\n  const submitData = () => {\n    setIsFetching(true);\n\n    const newProducts = items.map(({ id, name, price }) => ({\n      id,\n      name,\n      price,\n    }));\n    const reqObj = {\n      customerId: \"123456\",\n      basket: {\n        basketId: \"abcdef\",\n        products: newProducts,\n      },\n    };\n\n    api\n      .postData(\"/products\", reqObj)\n      .then((response) => {\n        console.log(\"response\", response);\n        setIsFetching(false);\n        setResponseStatus(\"success\");\n        window.localStorage.clear(); // clearing localstorage, can work on better maintaning localstorage or possibly use session storage\n      })\n      .catch((error) => {\n        console.log(\"error\", error);\n        setIsFetching(false);\n        setResponseStatus(\"error\");\n      });\n  };\n\n  return isFetching ? (\n    <div> Your Fancy loader </div>\n  ) : (\n    <div>\n      {responseStatus === \"success\" ? (\n        <div className=\"success\">\n          Submitted Successfully! <br /> you can use payment gateway, email\n          services, etc to charge and notify customer{\" \"}\n        </div>\n      ) : responseStatus === \"error\" ? (\n        <div className=\"error\">\n          {\" \"}\n          Error while submitting response! <br /> you may use azure monitor etc\n          to push redux state for debugging, etc{\" \"}\n        </div>\n      ) : null}\n      {!items.length ? (\n        <h2> There are No items in your cart!</h2>\n      ) : (\n        <div>\n          <h2>Your cart</h2>\n          <table>\n            <thead>\n              <tr>\n                <th>Item Name</th>\n                <th>Quantity</th>\n                <th>Price per unit</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((item) => (\n                <tr key={item.id}>\n                  <td>{item.name}</td>\n                  <td>{item.quantity}</td>\n                  <td>{item.price}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"submit-section\">\n            <button\n              className=\"submit-button\"\n              type=\"submit\"\n              onClick={submitData}\n            >\n              Submit\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { CartDispatchContext, addToCart } from \"../../contexts/cart\";\nimport \"./card-styles.css\";\n\nexport const Card = ({ product }) => {\n  const [isAdded, setIsAdded] = useState(false);\n  const dispatch = useContext(CartDispatchContext);\n  const productItem = product.basket.products[0];\n\n  const handleAddToCart = () => {\n    const product = { ...productItem, quantity: 1 };\n    addToCart(dispatch, product);\n    setIsAdded(true);\n    setTimeout(() => {\n      setIsAdded(false);\n    }, 500);\n  };\n  return (\n    <div className=\"card-container\">\n      <img\n        alt={productItem.name}\n        src={\n          productItem.productImage\n            ? productItem.productImage\n            : \"https://via.placeholder.com/200\"\n        }\n      ></img>\n      <p className=\"flex\">\n        {productItem.name} {productItem.price}\n      </p>\n      <button\n        className={!isAdded ? \"add-to-cart\" : \" add-to-cart added\"}\n        type=\"button\"\n        onClick={handleAddToCart}\n      >\n        {!isAdded ? \"ADD TO CART\" : \"✔ ADDED\"}\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list-styles.css\";\nimport { Card } from \"../card/card\";\n\nexport const CardList = (props) => {\n  return (\n    <div>\n      <div className=\"card-list\">\n        {props.productList &&\n          props.productList.map((product) => (\n            <Card key={product.id} product={product}></Card>\n          ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CartStateContext } from \"../../contexts/cart\";\nimport \"./cart-styles.css\";\n\nexport const Cart = () => {\n  const { items } = useContext(CartStateContext);\n  //can add logic here to preview cart\n  return (\n    <Link to=\"/checkout\">\n      <p className=\"counter\">{`Number of items in cart: ${items.length}`}</p>\n      <img\n        alt=\"click here to see shopping cart\"\n        src=\"https://img.icons8.com/material-outlined/100/000000/fast-cart.png\"\n      />\n    </Link>\n  );\n};\n","import React, { Component } from \"react\";\nimport { CardList } from \"../card-list/card-list\";\nimport api from \"../../apis/api\";\n\nimport { Cart } from \"../cart/cart\";\n\nclass Homepage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      productList: [],\n      originalProductList: [],\n    };\n    // clearing localstorage\n    window.localStorage.clear();\n  }\n  getProductDetails = () => {\n    //error boundary can be implemented here\n    api\n      .getData(\"/products\")\n      .then((response) => {\n        console.log(\"response\", response);\n        this.setState({ productList: response.data.results });\n        this.setState({ originalProductList: response.data.results });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  componentDidMount() {\n    this.getProductDetails();\n  }\n  render() {\n    const { productList } = this.state;\n    return (\n      <>\n        <Cart />\n        <CardList productList={productList}></CardList>\n      </>\n    );\n  }\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport CartProvider from \"./contexts/cart\";\nimport { Checkout } from \"./components/checkout/checkout\";\nimport Homepage from \"./components/homepage/homepage\";\n\n// const unsplash = new Unsplash({ accessKey: \"M2D69tHCgCGYDPS9IsjqwnJ8sQ5TJIBppJDd9eCoPDY\" });\n\nconst App = () => {\n  return (\n    <CartProvider>\n      <div className=\"App\">\n        <Router>\n          <header>\n            <Link to=\"/\">\n              <h1>Welcome to my fantastic e-commerce website!!©</h1>\n            </Link>\n          </header>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Homepage />\n            </Route>\n            <Route path=\"/checkout\" exact>\n              <Checkout />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </CartProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}